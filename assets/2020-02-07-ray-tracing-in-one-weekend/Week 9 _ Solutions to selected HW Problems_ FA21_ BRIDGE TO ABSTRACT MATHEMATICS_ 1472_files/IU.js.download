/*jslint browser: true, devel:false, nomen: true, sloppy: false, eqeq: false, vars: false, maxerr: 100, indent: 4, plusplus: true */
/*global $, console, alert, ENV*/

console.log("IU.js loaded.");

// D. Sobieralski - Feb 2015: 
// Helper functions from Ryan Florence at Instructure (https://gist.github.com/ryanflorence/5817898)
var IU_LMS = {
    canvasInstance: 'prod', //defaut to prod. On document ready, change to beta or test according to URL
    IU_ACCOUNT_ID: '98865',   // ID for top level Indiana University account
    observers: [
        {
            options: {
                childList: true,
                subtree: true
            },
            node: function() {
                return document.getElementById('nav-tray-portal');
            },
            callback: function() {
                IU_LMS.addNewAllCoursesLink();
                IU_LMS.hideAccountLinks();
            }
        }
    ],

    /**
     *  Watches a DOM element for various changes, then fires a callback.
     * 
     *  @param {Node} element The element to observe
     *  @param {MutationObserverInit} options The options for the observer
     *  @param {MutationCallback} callback Function to call when a mutation is observed
     * 
     *  @returns {Observer}  Custom MutationObserver class
     */
    Observer: function( element, options, callback) {
        // In case it's a jQuery object
        if ( element && element.length ) {
            element = element[0];
        }

        // No idea what you gave me then
        if ( !( element instanceof Node )) {
            return;
        }

        this._observer = new MutationObserver(( /*MutationRecord[]*/ mutations, self ) => callback( mutations, self ));
        this._observer.observe( element, options );

        this.disconnect = this._observer.disconnect;
        this.takeRecords = this._observer.takeRecords;
    },
    onPage: function (regex, fn) {
        'use strict';
        if (location.pathname.match(regex)) {
            fn();
        }
    },
    onElementRendered: function (selector, cb, _attempts) {
        'use strict';
        var el = $(selector);
        _attempts = ++_attempts || 1;

        //console.log(`Attempt ${_attempts} for element ${selector}.`)

        if (el.length) {
            return cb(el);
        }
        if (_attempts === 60) {
            return;
        }

        setTimeout(function () {
            IU_LMS.onElementRendered(selector, cb, _attempts);
        }, 250);
    },
    removeElementOnRender: function (selector) {
        'use strict';
        IU_LMS.onElementRendered(selector, function (selector) {
            var $el = $(selector);
            $el.remove();
        });
    },
    getCourseId: function () {
        //Since the ENV object changes how/where the course ID is specified, the URL is the most reliable/consistent place to find it.
        //Assumes URL pathname will begin /courses/<courseid> for all contexts where course ID is relevant.
        var pathArray = window.location.pathname.split('/');
        return (pathArray[1] === 'courses' && pathArray[2]) ? pathArray[2] : false;
    },

    // J. Zook - March 2016, updated July 2016
    // Gets current user's info from API.  Helpful items include primary_email, login_id, name, sortable_name 
    getCurrentUserInfo: function () {
        'use strict';
        var gcu = $.Deferred();

        $.ajax({
            url: '/api/v1/users/self/profile',
            type: 'get',
            dataType: 'json'
        })
        .done(function (userInfo){
            gcu.resolve(userInfo);
        })
        .fail(function () {
            gcu.reject('Error getting user info');
        });

        return gcu.promise();
    },


    // J. Zook - March 2016, Updated June 2021 
    // Gets count of action items from SIS for the provided username and action code. 
    // Production URL: 
    // Test URL: https://sisjee-stage.iu.edu/essweb-stg/web/sissr/das/pendingCounts.json?oprid=[USERNAME]&code=[CODE]
    // Note that username and code should be all caps
    getActionItemsCount: function (actionCode,user) {
        'use strict';
        var gaic = $.Deferred();
        var username = $.Deferred();
        var actionItemsURL = '';

        // If no username was provided, get the current logged in user
        if (user === undefined) {
            $.when(IU_LMS.getCurrentUserInfo()).then(
                function (userInfo) {
                    username.resolve(userInfo.login_id);
                }
            );
        } else {
            username.resolve(user);
        }

        // Once the username is known, get the count of items from the action list
        $.when(username).then(
            function (username) {
                // Set the URL depending on the canvas instance
                if (IU_LMS.canvasInstance === 'prod') {
                    actionItemsURL = 'https://sisjee.iu.edu/essweb-prd/web/sissr/das/pendingCounts.json?oprid='; //TODO: Update production URL
                } else {
                    actionItemsURL = 'https://sisjee-stage.iu.edu/essweb-stg/web/sissr/das/pendingCounts.json?oprid=';
                }
                //console.log('SIS action item url: ' + actionItemsURL + username + '&code=' + actionCode);
                // get the number of action items for the user and actionCode
                $.ajax({
                    url: actionItemsURL + username.toUpperCase() + '&code=' + actionCode,
                    type: 'get',
                    dataType: 'json'
                })
                .done(function (response, textStatus, jqXHR){
                    //Note: The old Kuali endpoint used to also return a link to the user's action item page. 
                    //The current SIS endpoint only returns the item count for the given action code.
                    gaic.resolve(response.pendingDocumentCount);
                })
                .fail(function () {
                    gaic.reject('ActionList fail');
                });
            }
        );
        
        return gaic.promise();
    },

    /**
     *  Sends an HTTP GET request to the specified URL, returning the response as a Promise.
     * 
     *  @param {string} url The request URL.
     * 
     *  @returns {Promise}  The HTTP response as JSON.
     */
    apiGet: function(url) {
        var result = $.Deferred();

        $.ajax({
            url: url,
            type: 'get',
            dataType: 'json'
        })
            .done(
                function (data) {
                    result.resolve(data);
                })
            .fail(
                function(jqXHR, responseStatus, errorThrown) {
                    if (errorThrown) {
                        result.reject('API call failed: ' + errorThrown.toString());
                    }
                    
                    if (!errorThrown && jqXHR.responseText) {
                        var responseText = jqXHR.responseText.toString().substring(0, 50) + '..';
                        result.reject('API Response Error Text: ' + responseText);
                    }
                });

        return result.promise();
    },

    /**
     *  Returns a jQuery Promise object representing all Tabs for a Course, retrieved from the Canvas API.
     *  See {@link https://canvas.instructure.com/doc/api/tabs.html}
     *  
     *  @param {string} courseId The ID of the Course.
     *  
     *  @returns {Promise}       All Tabs for the Course.
     */
    getAllCourseTabsByCourseId: function (courseId) {
        'use strict';

        var result  = $.Deferred();

        if (!courseId)
            result.reject('No Course ID specified.');

        if (typeof courseId !== 'string')
            result.reject('Course ID must be of type string.');
        
        if (!courseId.match(/\d+/))
            result.reject('Invalid Course ID.');

        if (result.state() === 'rejected')
            return result.promise();
        
        var path = '/api/v1/courses/' + courseId + '/tabs';

        IU_LMS.apiGet(path)
            .done(
                function (tabs) {
                    result.resolve(tabs);
                })
            .fail(
                function (errorMessage) {
                    result.reject('Call to Canvas API Tabs endpoint failed. ' + errorMessage);
                });

        return result.promise();
    },

    /**
     *  Returns a jQuery Promise object representing a single Course Tab.
     *  
     *  @param {string} courseId    The ID of the Course.
     *  @param {string} tabName     The name of the Tab.
     *  
     *  @returns {Promise}          The Course Tab matching the specified tabName.
     */
    getCourseTabByName: function (courseId, tabName) {
        'use strict';

        var result = $.Deferred();

        if (!tabName)
            result.reject('No Tab label name specified.');

        if (typeof tabName !== 'string')
            result.reject('Tab name must be of type string.');
        
        if (result.state() === "rejected")
            return result.promise();

        IU_LMS.getAllCourseTabsByCourseId(courseId)
            .done(
                function (tabs) {
                    for (var i = 0; i < tabs.length; i++) {
                        if (tabs[i] && tabs[i].label) {
                            if (tabs[i].label.toLowerCase() === tabName.toLowerCase()) {
                                result.resolve(tabs[i]);
                                break;
                            }
                        }
                    }

                    if (result.state() === 'pending')
                        result.reject('Could not find Course Tab with name "' + tabName + '."');
                })
            .fail(
                function (errorMessage) {
                    result.reject('Error getting all Course Tabs. ' + errorMessage);
                });

        return result.promise();
    },

    /**
     * Returns a jQuery Promise object representing Tabs for a Course, retrieved from the Canvas API.
     * 
     * Pass either a single Tab label name or a list of label names as the filterTabLabels argument 
     * to return only the Tabs with matching label names.
     * 
     * To retrieve all Tabs for a Course, use the getAllCourseTabsByCourseId method.
     * See {@link https://canvas.instructure.com/doc/api/tabs.html}
     * 
     * @param {string} courseId                     The ID of the Course.
     * @param {(string|string[])} filterTabLabels   A single label name or a list of label names to be matched.
     * 
     * @returns {Promise}                           Tabs for the Course, filtered by the label name(s) specified
     *                                              in filterTabLabels.
     */
    getFilteredCourseTabsByCourseId: function (courseId, filterTabLabels) {
        'use strict';

        var result          = $.Deferred();
        var matchTabLabels  = [];
        var matchedTabs     = [];

        if (!filterTabLabels)
            result.reject('No Tab label name filter specified.');

        if (typeof filterTabLabels === 'string') {
            matchTabLabels.push(filterTabLabels);
        } 
        else if (Array.isArray(filterTabLabels)) {
            for (var i = 0; i < filterTabLabels.length; i++) {
                if (filterTabLabels[i] && typeof filterTabLabels[i] === 'string')
                    matchTabLabels.push(filterTabLabels[i]);
            }

            if (!matchTabLabels.length) 
                result.reject('The specified Tab labels filter was not of type string[].');
        }
        else {
            result.reject('The Tab labels filter must be of type string or string[].');
        }
        
        if (result.state() === "rejected")
            return result.promise();

        
        IU_LMS.getAllCourseTabsByCourseId(courseId)
            .done(
                function (data) {
                    for (var i = 0; i < data.length; i++) {
                        if (data[i] && data[i].label) {
                            for (var j = 0; j < matchTabLabels.length; j++) {
                                if (data[i].label.toLowerCase() === matchTabLabels[j].toLowerCase()) {
                                    matchedTabs.push(data[i]);
                                    break;
                                }
                            }
                        }
                    }
    
                    result.resolve(matchedTabs);
                })
            .fail(
                function (errorMessage) {
                    result.reject('Could not get filtered Tabs by label names. ' + errorMessage);
                });

        return result.promise();
    },

    /**
     * Returns a jQuery Promise object representing the URL of a Tab with the given label name
     * in the Course specified by courseId.
     * 
     * @param {string} courseId             The ID of the Course.
     * @param {string} tabName              The label name of the Tab.
     * @param {string} isSessionlessLaunch  Whether the URL returned should be for a sessionless launch.
     * 
     * @returns {Promise}                   If isSessionlessLaunch is True, the sessionless launch URL is returned.
     *                                      If isSessionlessLaunch is False, returns the html_url property if present,
     *                                      otherwise the full_url property is returned.
     */
    getCourseTabUrlByName: function (courseId, tabName, isSessionlessLaunch) {
        'use strict';

        var result = $.Deferred();

        if (!tabName)
            result.reject('No Tab label name specified');

        if (typeof tabName !== 'string')
            result.reject('Tab label name must be of type string.');

        if (result.state() === 'rejected')
            return result.promise();

        if (isSessionlessLaunch !== true) {
            isSessionlessLaunch = false;
        }

        IU_LMS.getCourseTabByName(courseId, tabName)
            .done(
                function (tab) {
                    if (isSessionlessLaunch) {
                        if (tab.url) {
                            result.resolve(tab.url);
                        }
                        else {
                            result.reject('No sessionless launch URL found for the tool.');
                        }
                    }
                    else {
                        if (tab.html_url) {
                            result.resolve(tab.html_url);
                        }
                        else {
                            if (tab.full_url) {
                                result.resolve(tab.full_url);
                            }
                            else {
                                result.reject('The Course Tab "' + tabName + '" exists, but its URL could not be found.');
                            }
                        }
                    }
                })
            .fail(
                function(errorMessage) {
                    result.reject('Error getting Course Tab by name. ' + errorMessage);
                });

        return result.promise();
    },

    /**
     * Returns a jQuery Promise object representing the sessionless launch URL for a Tab.
     * 
     * @param {string} tabUrl   The ID of the Course.
     * 
     * @returns {Promise}       The sessionless launch URL.
     */
    getSessionlessLaunchUrl: function (tabUrl) {
        var result = $.Deferred();

        IU_LMS.apiGet(tabUrl)
            .done(
                function (tool) {
                    if (tool) {
                        if (tool.url) {
                            result.resolve(tool.url);
                        }
                        else {
                            result.reject('No sessionless launch URL was found.');
                        }
                    }
                    else {
                        result.reject('No Tool data was returned from the server.');
                    }
            })
            .fail(
                function(errorMessage) {
                    result.reject('Call to Canvas API Sessionless Launch endpoint failed. ' + errorMessage);
                });

        return result.promise();
    },

    /**
     *  Attaches an event handler to an HTML element, which, when fired,
     *  will get the sessionless launch URL from the Canvas API and open a new
     *  tab/window with that URL.
     *
     *  @param {string} eventType The type of event, such as 'click' or 'input'.
     *  @param {string} selector A DOMString containing one or more selectors to match against.               
     *  @param {string} sessionlessLaunchApiUrl The Canvas API URL used to retrieve the sessionless launch URL.
     */
    attachSessionlessLaunchEventHandler: function(eventType, selector, sessionlessLaunchApiUrl) {
        'use strict';

        // Make sure the argument types are valid
        if (typeof eventType !== "string"   ||
            typeof selector !== "string"    ||
            typeof sessionlessLaunchApiUrl !== "string")
        {
            return;
        }

        // Get all elements matching the selector
        var elements = document.querySelectorAll(selector);

        if (!elements.length) {
            return;
        }

        // For each element...
        for (var i = 0; i < elements.length; i++) {
            // Add the event listener
            elements[i].addEventListener(eventType, function(event) {
                // Prevent the default browser action
                event.preventDefault();

                // Open a new window/tab without the URL specified
                var newWindow = window.open("", "_blank");

                // Get the sessionless launch URL from the Canvas API
                IU_LMS.getSessionlessLaunchUrl(sessionlessLaunchApiUrl)
                    .done( function(launchUrl) {
                        // If the launch URL exists...
                        if (launchUrl) {
                            // Set the new window/tab URL
                            newWindow.location.href = launchUrl;
                        }
                        else {
                            // Otherwise close the window
                            newWindow.close();
                        }
                    })
                    .fail( function (errorMessage) {
                        // If an error occurred, close the new window/tab
                        console.error('Error getting sessionless launch URL. ' + errorMessage);
                        newWindow.close();
                    });
            });
        }
    },

     /**
     * Returns a jQuery Promise object representing Enrollments for a Course, filtered by Enrollment Type.
     * 
     * @param {string} courseId                                 The ID of the Course.
     * @param {(string|string[])} filterEnrollmentTypes         The Enrollment Types to be included in the result.
     *                                                          For example, 'TeacherEnrollment' or 'StudentEnrollment.'
     * 
     * @returns {Promise}                                       The first 100 enrollments in the Course,
     *                                                          optionally filtered by enrollment type.
     *                                                          If no filter is specified, all enrollment types
     *                                                          are returned.
     */
    getFilteredEnrollmentsByCourseId: function (courseId, filterEnrollmentTypes) {
        'use strict';

        var result = $.Deferred();
        var params = '?';

        if (!courseId)
            result.reject('No Course ID specified.');

        if (typeof courseId !== 'string')
            result.reject('Course ID must be of type string.');

        if (!courseId.match(/\d+/))
            result.reject('Invalid Course ID.');

        if (filterEnrollmentTypes) {
            // If the filter is of type string, append it to the type[] parameter.
            if (typeof filterEnrollmentTypes === 'string') {
                params += 'type[]=' + filterEnrollmentTypes;
            }
            // If the filter is of type Array, append all values to the type[] parameter.
            else if (Array.isArray(filterEnrollmentTypes)) {
                for (i = 0; i < filterEnrollmentTypes.length; i++) {
                    // Make sure the underlying type is string.
                    if (typeof filterEnrollmentTypes[i] === 'string') {
                        if (i !== 0)
                            params += '&';
                        params += 'type[]=' + filterEnrollmentTypes[i];
                    }
                }

                // If no valid values were appended, reject the promise.
                if (params === '?')
                    result.reject('The specified Enrollment Type filter was not of type string[].');
            }
            else {
                result.reject('Enrollment Type filter must be of type string or string[].');
            }
        }
        
        if (result.state() === 'rejected')
            return result.promise();

        // Todo: Extract API call into it's own method.
        // Todo: Dynamically set the per_page parameter value.
        $.ajax({
            url: '/api/v1/courses/' + courseId + '/enrollments' + params + '&per_page=100',
            type: 'get',
            dataType: 'json'
        })
            .done(function (enrollments) {
                result.resolve(enrollments);
            })
            .fail(function(jqXHR, responseStatus, errorThrown) {
                result.reject('Call to Canvas API Enrollments endpoint failed. Error: ' + errorThrown.toString() + '.');
            });

        return result.promise();        
    },

    /**
     * Returns a jQuery Promise object representing a boolean value determining if a
     * given User is enrolled as a Teacher for a specified Course.
     * 
     * @param {string} userId       The ID of the User.
     * @param {string} courseId     The ID of the Course.
     * 
     * @returns {Promise}           True if a user is an enrolled teacher for the course,
     *                              otherwise returns false.
     */
    isUserEnrolledTeacherByCourseId : function (userId, courseId) {
        'use strict';

        var result = $.Deferred();

        if (!userId)
            result.reject('No User ID specified.');

        if (typeof userId !== 'string')
            result.reject('User ID must be of type string.');

        if (!userId.match(/\d+/))
            result.reject('Invalid User ID.');
        
        if (result.state() === "rejected")
            return result.promise();

        IU_LMS.getFilteredEnrollmentsByCourseId(courseId, 'TeacherEnrollment')
            .done( function (teacherEnrollments) {
                if (Array.isArray(teacherEnrollments)) {
                    for (var i = 0; i < teacherEnrollments.length; i++) {
                        if (teacherEnrollments[i].user_id.match(/\d+/)) {
                            if (userId === teacherEnrollments[i].user_id) {
                                result.resolve(true);
                                break;
                            }
                        }
                    }
                   
                    if (result.state() !== "resolved")
                        result.resolve(false);
                }

                if (result.state() === "pending")
                    result.reject('Could not find any enrollments for the course.');
            })
            .fail( function (errorMessage) {
                result.reject('Failed to retrieve enrollments for the course. ' + errorMessage);
            });
        
        return result.promise();
    },

    /**
     * Prepends a custom Gradebook menu to the DOM element specified by gradebookMenuElementSelector.
     * 
     */
    createCustomGradebookMenu: function () {
        'use strict';

        IU_LMS.onElementRendered('div#gradebook-actions', function (selector) {
            var $gradebookActions = $(selector);

            if (!$gradebookActions || $gradebookActions.length < 1) {
                console.log('Unable to add custom Gradebook menu. Could not find DOM element "' + selector + '".');
            }
            else {
                $gradebookActions.prepend(
                    '<div id="custom-gradebook-menu" class="al-dropdown__container" style="position: relative;">' +
                        '<a class="al-trigger btn" role="button" href="#" style="margin-right: .5em;">' +
                                '<span>IU Grading Tools</span>' +
                                '<i class="icon-mini-arrow-down" aria-hidden="true"></i>' +
                        '</a>' +
                        '<ul class="al-options gradebook_dropdown" role="menu" tabindex="0" id="custom-gradebook-menu-list">' +
                        '</ul>' +
                    '</div>');
            }
        });   
    },

    /**
     * Appends a list of Course Tabs to the existing Gradebook Menu.
     * 
     * @param {string} courseId     The ID of the Course.
     * @param {Object[]} tabsToAdd  Array of Tab objects to add to the menu.
     * 
     */
    appendTabsToGradebookMenu: function(courseId, tabsToAdd) {
        'use strict';

        IU_LMS.onElementRendered('ul.gradebook_dropdown', function (selector) {
            var $gradebookMenu = $(selector);

            if (!$gradebookMenu || $gradebookMenu.length < 1) {
                console.log(
                    'Unable to add tools to Gradebook menu. ' +
                        'Could not find DOM element with selector "' + selector + '".');
                return;
            }

            // Loop through the tools to add
            for (var i = 0; i < tabsToAdd.length; i++) {
                var currentTab = tabsToAdd[i];

                if (currentTab.url && currentTab.menuLabel) {
                    // HTML to append to the Gradebook menu.
                    // If we need to perform a file download, don't add an href attribute.
                    var listItemHtml = 
                        '<li class="ui-menu-item" role="presentation">' +
                            '<a id="' + currentTab.id + '" class="ui-corner-all" ' +
                                    (currentTab.isFileDownload ? 'href="#" ' :
                                        (currentTab.isSessionlessLaunch ? 'href="#" ' :
                                            'href="' + currentTab.url + '" ') + 'target="_blank" ') +
                                'tabindex="-1" role="menuitem">' + currentTab.menuLabel + 
                            '</a>' +
                        '</li>';

                    // We may or may not already have li elements in the list.
                    // If we do, we'll want to append the new tools after them.
                    var $gradebookMenuListItems = $gradebookMenu.children('li');

                    // Append tool link to menu.
                    if ($gradebookMenuListItems.length > 0) {
                        $gradebookMenuListItems.last().after(listItemHtml);
                    }
                    else {
                        $gradebookMenu.append(listItemHtml);
                    }

                    if (currentTab.isSessionlessLaunch && !currentTab.isFileDownload) {
                        IU_LMS.attachSessionlessLaunchEventHandler('click', '#' + currentTab.id, currentTab.url);
                    }

                    // Custom logic for tools that perform file downloads.
                    if (currentTab.isFileDownload && !currentTab.isSessionlessLaunch) {
                        // Click triggers the appending to the <body> of an iframe 
                        // containing the External Tool's (tab's) URL. 
                        $("#" + currentTab.id).click(function () {                                                                      
                            var $ltiIframe = $(
                                '<iframe style="display: none;" id="ltiIframe-' + currentTab.id + '" src="' + 
                                        currentTab.url + '">' +
                                '</iframe>');

                            // Remove iframe if it already exists.
                            $("#ltiIframe-" + currentTab.id).remove();

                            // Append iframe to body.
                            $('body').append($ltiIframe);

                            // Remove iframe automatically after 1 minute.
                            setTimeout(function () {
                                $("#ltiIframe-" + currentTab.id).remove();
                            }, 60000);
                        });
                    }
                }
            }
        });
    },

    addNewAllCoursesLink: function() {
        var tray = $('#nav-tray-portal');

        if (!tray) {
            return;
        }

        // Is the Courses menu currently visible?
        var coursesHeader = tray.find('h2:contains("Courses")')[0];

        if (!coursesHeader) {
            return;
        }

        // Is the new link already added?
        if (tray.find('ul li#custom-all-courses')[0]) {
            return;
        }

        var list = tray.find('ul:contains("All Courses")')[0];

        if (!list) {
            return;
        }

        // Get the last child in the list and copy it
        var node = list.querySelector('li:last-child');

        if (!node) {
            return;
        }

        var customAllCoursesLink = node.cloneNode(true);
        customAllCoursesLink.id = 'custom-all-courses';

        var link = customAllCoursesLink.querySelector('a');

        if (!link) {
            return;
        }

        link.href = '/users/self/external_tools/195719';

        link.innerText = 'Search, Filter, and Manage Courses';

        list.appendChild(customAllCoursesLink);
    },
    hideAccountLinks: function() {
        var tray = $('#nav-tray-portal');
        
        if (!tray) {
            return;
        }

        // Is the Profile fly-out menu visible?
        var btnLogout = tray.find('form button span:contains("Logout")');

        if (!btnLogout) {
            return;
        }

        var multicourseMessages = tray.find('ul li a:contains("Multicourse Messages")');
        var startNewCourse = tray.find('ul li a:contains("Start a New Course")');

        if (multicourseMessages[0]) {
            var item = multicourseMessages.parents('li')[0];
            item.remove();
        }
        else if (startNewCourse[0]) {
            var item = startNewCourse.parents('li')[0];
            item.remove();
        }
    },

    // Runs on Assignment pages.
    // Hides the AdRx file type in the list of permitted file types.
    //
    // $contentTabs is our reference point in the DOM, 
    // and fileTypes is an array of allowed file types, excluding adrx.
    hideAdRxFileType: ( $contentTabs, fileTypes ) => {
        // Find the span that has the words 'File permitted' since we'll need to change it.
        let $fileTypesSpan = $contentTabs.find( "label[for='inputFileDrop'] span:contains('File permitted')" ).last();

        // If we find it, change its text to the list of file types that had AdRx removed
        if ( $fileTypesSpan.length ) {
            $fileTypesSpan.html( `File permitted: ${ fileTypes.map( x => x.toUpperCase() ).join(', ') }` );
        }


        // This is a recursive callback function that observes changes in the DOM.
        // We call it once, immediately after creating it, then register it as a callback
        // that fires when the DOM changes.
        //
        // mutations is an array of DOM changes, and self is an instance of MutationObserver.
        const observeContentTabs = ( mutations, self ) => {

            // If self is not defined, then we are not in a callback context,
            // meaning that this function was not called because there was a DOM change observed.
            if ( !self ) {
                // Create a MutationObserver with our custom class.
                // This is what listens for DOM changes.
                IU_LMS.Observer(
                    // Bind the listender to #iu-eds-assignments-2
                    document.getElementById("iu-eds-assignments-2-tabs"),
                    {
                        // Watch all children of the parent element
                        childList: true,
                        subtree: true
                    },
                    observeContentTabs);

                // Exit the function if we've wired up the above listener
                return;
            }

            // This is the same code as above, we just needed to do it once (above) and then any time the callback is fired.
            let $fileTypesSpan = $contentTabs.find( "label[for='inputFileDrop'] span:contains('File permitted')" ).last();

            if ( $fileTypesSpan.length ) {
                self.disconnect();

                $fileTypesSpan.html( `File permitted: ${ fileTypes.map( x => x.toUpperCase() ).join(', ') }` );

                observeContentTabs();
            }
        };

        // Call the function above
        observeContentTabs();
    },

    // Runs on Assignment pages.
    // jQuery click handler for the Share with my Advisor button.
    onclickShareWithAdvisorBtn: ( event ) => {
        event.preventDefault();

        // Create a modal once the button is clicked.
        // If the modal already exists, use it again.
        let $dialog = $( "#adrx-status" ).first();

        if ( !$dialog.length ) {
            // If it doesn't exist, create it as an empty div
            $dialog = $( `<div id="adrx-status"></div>` );
        }

        $dialog.html( `
            <p>Your submission is being sent to your advisor. Please do not close this window.</p>
            <div style="margin:3rem;">
                <div class="iu-eds-spinner">&nbsp;</div>
            </div>
        `);

        $dialog.dialog({
            title: 'Submitting...',
            width: 600,
            resizable: false,
            modal: true,
            buttons: []
        });

        $( ".iu-eds-spinner" ).spin({
            position: 'relative'
        });        

        // Launch the AdRx Token Generator tool via sessionless launch
        const externalToolLabel = "AdRx Token Generator";
        const externalToolId = '105797';

        //Hit API for the sessionless launch URL for the LTI tool by ID (AKA external tool) 
        $.getJSON( `/api/v1/courses/${ENV.COURSE_ID}/external_tools/sessionless_launch?id=${externalToolId}` )
            .done(( tool ) => {
                const { url, name } = tool;

                // Confirm that the returned tool name matches what we expect
                if ( !url || !name || name.indexOf( externalToolLabel ) < 0 ) {
                    // Stop the loading spinner
                    $( ".iu-eds-spinner" ).spin( false );

                    // If not, change the dialog to show an error.
                    $dialog.dialog( 'option', 'title', 'AdRx Submission Error');
                    $dialog.html( '<p>Error launching tool. Please reload the page and try again.</p>' );
                    $dialog.dialog( 'option', 'buttons', [
                        {
                            text: 'Close',
                            class: 'btn btn-primary',
                            click: () => {
                                $dialog.dialog('close');
                            }
                        }
                    ]);

                    $dialog.dialog( 'open' );
                }

                // If there's already an iframe with this ID, remove it
                $( '#adrxLtiIframe' ).remove();
                
                // Attach an invisible iframe to the body, which loads the AdRx Token Generator tool.
                // The tool then sends a postMessage to the browser's window object, 
                //  which has an event handler defined at the bottom of this file.
                let $ltiIframe = $( `<iframe style="display:none;" name="adrxLtiIframe" id="adrxLtiIframe" src="${url}"></iframe>` );

                $( 'body' ).append( $ltiIframe );

                // Remove iframe after 1 minute
                setTimeout( () => {
                    $ltiIframe.remove();
                }, 60000);
            })
            .fail(( jqXHR, textStatus ) => {
                // Stop the loading spinner
                $( ".iu-eds-spinner" ).spin( false );

                // If the API call failed, change the dialog to show an error
                $dialog.dialog( 'option', 'title', 'AdRx Submission Error');
                $dialog.html( '<p>External Tool sessionless launch URL request failed. Please reload the page and try again.</p>' );
                $dialog.dialog( 'option', 'buttons', [
                    {
                        text: 'Close',
                        class: 'btn btn-primary',
                        click: () => {
                            $dialog.dialog('close');
                        }
                    }
                ]);
            });
    },

    // Runs on Assignments page.
    // Adds Share with Advisor button to page.
    addShareWithAdvisorBtn: ( isNewAssignmentsPage = false ) => {
        // HTML for the Share with my Advisor button
        const $shareWithAdvisorBtn = `
            <span style="margin: .75rem .5rem .75rem 0;">
                <a id='adrx-submit' class='btn btn-default' href='#'>
                    Share with my advisor
                </a>
            </span>
        `;
    
        // If the button already exists, just show it and return
        if ( $( '#adrx-submit' ).first().length ) {
            $( '#adrx-submit' ).show();
            return;
        }

        if ( isNewAssignmentsPage ) {
            IU_LMS.onElementRendered( '#assignments-2-student-header', ( $element ) => {
                // FRAGILE AF
                let $shareBtnParent =
                    $( $element )
                        .find( '> span:last-of-type > :nth-child(2) > :last-child > :first-child > span:nth-child(2)' )
                        .first();

                $shareBtnParent.prepend( $shareWithAdvisorBtn );
            });
        }
        else {
            IU_LMS.onElementRendered( "#sidebar_content div:contains('Submission')", ( $element ) => {
                // append the button inside the Submission div
                $element.first().append( $shareWithAdvisorBtn );
            });
        }

        // Click handler for ADRX "Share with my Advisor" button
        $( '#adrx-submit' ).on( 'click', IU_LMS.onclickShareWithAdvisorBtn );
    }
};


//Detect beta or test instance by URL
//Update Dec 2020: LMS Dev is moving their tools to a new microservice infrastructure, so the URL will be structured differently:
// Prd - <appname>.apps.iu.edu
// Test - <appname>-stg.apps-test.iu.edu
// Beta - <appname>-reg.apps-test.iu.edu
// Sandbox - <appname>-snd.apps-snd.iu.edu
if (window.location.href.lastIndexOf("https://iu.instructure.com", 0) === 0) {
    IU_LMS.canvasInstance = 'prod';
    IU_LMS.lmsLegacyRootURL = 'https://canvas.iu.edu/lms-prd/';
    IU_LMS.lmsMicroserviceUrlStem = '.apps.iu.edu/';
} else if (window.location.href.lastIndexOf("https://iu.test.instructure.com", 0) === 0) {
    IU_LMS.canvasInstance = 'test';
    IU_LMS.lmsLegacyRootURL = 'https://canvas-test.iu.edu/lms-stg/';
    IU_LMS.lmsMicroserviceUrlStem = '-stg.apps-test.iu.edu/';
} else if (window.location.href.lastIndexOf("https://iu.beta.instructure.com", 0) === 0) {
    IU_LMS.canvasInstance = 'beta';
    IU_LMS.lmsLegacyRootURL = 'https://canvas-beta.iu.edu/lms-reg/';
    IU_LMS.lmsMicroserviceUrlStem = '-reg.apps-test.iu.edu/';
} else if (window.location.href.lastIndexOf("https://iu-tc.instructure.com", 0) === 0) {
    IU_LMS.canvasInstance = 'tc';
    IU_LMS.lmsLegacyRootURL = 'https://sand.canvas.iu.edu/lms-snd/';
    IU_LMS.lmsMicroserviceUrlStem = '-snd.apps-snd.iu.edu/';
}

//write ENV object to console on beta and test
if (IU_LMS.canvasInstance === 'test' || IU_LMS.canvasInstance === 'beta') {
    console.log("ENV object:");
    console.log(ENV);
}

var observer = new MutationObserver(function(mutations, self) {
    var doneObserving = true;
    for (k = 0; k < IU_LMS.observers.length; k++) {
        var observer = IU_LMS.observers[k];
        
        if (observer.handler) {
            continue;
        }

        var nodeToObserve = observer.node();
        if (nodeToObserve instanceof Node) {
            observer.handler = new MutationObserver(observer.callback);
            observer.handler.observe(nodeToObserve, observer.options);
        }
        else {
            doneObserving = false;
        }
    }

    if (doneObserving) {
        self.disconnect();
    }
});

observer.observe(document.body, {
    childList: true,
    subtree: true,
    attributes: false,
    characterData: false
});




// Code to run on each page load
// ================================================================================
$(document).ready(function () {
    'use strict';
    
    // Begin IU customizations:
    // ================================================================================

    // 1. Hide "Delete My Account" link
    $('.admin:contains("Delete My Account")').hide();
    
    // 2. Change text of "Reset Course Content" button
    $('.reset_course_content_button').html('\n<i class="icon-trash" aria-hidden="true"></i>Delete All Course Content\n');

    // 3. E. Scull: disable Course ID edit field on Course > Settings page
    $("form#course_form input#course_course_code").prop('disabled', true);


    /* 404 PAGE */
    IU_LMS.onElementRendered('div.ic-Error-page h1:contains(Page Not Found)', function (selector) {
        // Add IU specific support information below 404 page content
        var pageNotFoundHelp = [
                '<p>We\'re sorry! The page you requested is not available.  Please let your instructor know the page is missing or broken.</p>',
                '<p>If you think something\'s wrong with Canvas, notify the UITS Support Center by completing the <a href="https://eds.iu.edu/canvashelp/" target="_blank" style="white-space: nowrap;">Ask for Help form</a>.</p>'
            ].join('');
        
        $(selector).after(pageNotFoundHelp);
    });



});







// Page-specific code:
// ================================================================================


// 5. D. Sobieralski - Feb 2015: 
// This script adds an option to the "little gear" pulldown menu for the gradebook IU export csv.
// It requires that the LTI tool for generating the csv is added to the site and that it is 
// labeled the same as what is in the variable externalToolLabel

// E. Scull: Update January 2016: Add another option to the "little gear": "Grade Report for Dropped Students"
// Modify Damian's original mechanism to allow for more than one link to be added.
// Idea: Use arrays for foundObjects, externalToolLabels, and newMenuItemLabels. Loop through and find all Tools, then loop through and add them when the UL rendered.
// Question: How to handle the iframe? Multiple iframes probably, so use classes instead of IDs.
IU_LMS.onPage(/\/courses\/\d+\/gradebook/, function () {
    'use strict';
    console.log("on gradebook page");
    var myUrl = location.pathname,
        indexOfGradebook = myUrl.lastIndexOf("/gradebook"),
        indexOfPreGradebookSlash = myUrl.lastIndexOf("/", indexOfGradebook - 1),
        courseId = myUrl.substring(indexOfPreGradebookSlash + 1, indexOfGradebook),
        pageTitle = $("title").text(),
        gradebookIndivViewTitle = 'Gradebook: Individual View';

    //make sure we have a course ID
    if (courseId === null || courseId.trim().length === 0) {
        return;
    }

    //Make sure we're not on the "individual" gradebook view, but rather the default course gradebook view.
    if (pageTitle === gradebookIndivViewTitle) {
        // individual view, do nothing
        console.log("Individual gradebook view");
    } else {
        //default view

        // Create array of custom objects for each new gradebook tool.
        var newGradebookToolsToAdd = [
            {    
                label:                  'SIS Grade Roster', // Tab label name
                menuLabel:              'SIS Grade Roster', // Menu label text
                id:                     'sis-grade-roster', // Unique identifier
                url:                    '',                 // URL for the tool
                isFileDownload:         false,              // Does this tool perform a file download?
                isSessionlessLaunch:    true,               // Does this tool need a sessionless launch?
            },
            {
                label:                  'Export Grades for SIS',
                menuLabel:              'Export Grades for SIS',
                id:                     'sis-grade-export',
                url:                    '',
                isFileDownload:         true,
                isSessionlessLaunch:    false,
            },
            // Deprecated per Lynn's email on 6/6/2018 - NAS
            /*{
                label:          'Grade Report for Dropped Students',
                menuLabel:      'Grade Report for Dropped Students',
                id:             'dropped-students-report', 
                isFileDownload: true,
            }*/
        ];
        
        // Create an array of promises for each tool, to be resolved independently.
        var promises = [];

        for (var i = 0; i < newGradebookToolsToAdd.length; i++) {
            promises[i] = $.Deferred();
        }

        // Loop through each new tool to add, getting the URL for each.
        $.map(newGradebookToolsToAdd, function(tool, index) {
            IU_LMS.getCourseTabUrlByName(courseId, tool.label, tool.isSessionlessLaunch)
                .done(
                    function(url) {
                        tool.url = url;
                        promises[index].resolve();
                    })
                .fail(
                    function(errorMessage) {
                        console.info(errorMessage);
                        // If we failed to get a tool's info, it's likely not available in the current context.
                        // We'll remove it from our list of tools, but still resolve the promise.
                        newGradebookToolsToAdd.splice(index, 1);
                        promises[index].resolve();
                    });
        });

        // Call $.when() against all promises.
        // If any fail, the fail() callback will be called immediately.
        $.when.apply($, promises)
            .done(
                function() {
                    // Make sure we have at least one tool to add.
                    if (newGradebookToolsToAdd.length > 0) {
                        // Create a custom menu on the NEW gradebook page.
                        IU_LMS.createCustomGradebookMenu();

                        // Append the new tools to the gradebook menu.
                        IU_LMS.appendTabsToGradebookMenu(courseId, newGradebookToolsToAdd);
                    }
                })
            .fail(
                function(errorMessage) {
                    // We're not rejecting any of the promises, so we shouldn't enter this block.
                    // It's here just in case something goes wrong.
                    console.log(errorMessage);
                });
    } // else 
});







/****************************************************
 *  Pages:  - Syllabus, Course Home
 *
 *  Routes: - /assignments/syllabus 
 * 
 *  Tools:  - Syllabus addendum tool
 * 
 ****************************************************
 */
IU_LMS.onPage(/\/assignments\/syllabus$|\/courses\/[0-9]*$/, function () {
    'use strict';

    //Since we're running this on Course Homepages (in case the course home is set to the Syllabus), 
    //check to ensure we're actually rendering syllabus content before unnecessarily running the recursive onElementRendered function
    if (typeof ENV.SYLLABUS_BODY === 'undefined') {
        return;
    }

    console.log("on syllabus page");
    
    //Place Syllabus Addendum content after the #course_syllabus div
    IU_LMS.onElementRendered('#course_syllabus', function (selector) {
        var $el = $(selector),
            courseId = IU_LMS.getCourseId(),
            $addendumEl = $("<div id='iu-eds-syllabus-addendum-wrapper' class='iu-eds-syllabus-addendum-wrapper'></div>"),
            i;

        //Call the LMS Dev REST endpoint to retrieve the syllabus addendum array for this course.
        //Will return empty array if none are available.
        $.ajax({
            url: IU_LMS.lmsLegacyRootURL + 'hierarchyresourcemanager/rest/syllabus/' + courseId,
            type: 'get',
            dataType: 'json'
        })
            .done(function (syllabusChunks) {
                if(syllabusChunks.length > 0) {

                    for(i = 0; i < syllabusChunks.length; i++) {
                        $addendumEl.append("<details><summary><h2>" + syllabusChunks[i].syllabusTitle + "</h2></summary><div class='iu-eds-syllabus-addendum-block iu-eds-group-clearfix'>" + syllabusChunks[i].syllabusContent + "</div></details>");
                    }
                    $el.append($addendumEl);
                }
            })
            .fail(function (jqXHR, textStatus) {
                console.log("Syllabus addendum tool GET call failed: " + textStatus);
            });        
    });

});




/****************************************************
 *  Pages:  - ePortfolios
 *
 *  Routes: - /dashboard/eportfolios
 * 
 *  Tools:  - Remove "Start a New Course" from nav
 *          - Remove "Multicourse Messenger" from nav
 * 
 ****************************************************
 */
IU_LMS.onPage(/\/dashboard\/eportfolios/, function () {
    'use strict';
    console.log("on eportfolios page");
    
    $("li.section:contains('Start a New Course')").hide();
    $("li.section:contains('Multicourse')").hide();

});





/****************************************************
 *  Pages:  - Profile
 *
 *  Routes: - /profile
 * 
 *  Tools:  - Remove "Start a New Course" from nav
 *          - Remove "Multicourse Messenger" from nav
 * 
 ****************************************************
 */
IU_LMS.onPage(/\/profile/, function () {
    'use strict';
    console.log("on profile page");
    
    $("li.section:contains('Start a New Course')").hide();
    $("li.section:contains('Multicourse')").hide();

});



/****************************************************
 *  Pages:  - Profile Settings
 *
 *  Routes: - /profile/settings
 * 
 *  Tools:  - New Access Token Request Form
 *          - Disable changing default email address
 * 
 ****************************************************
 */
IU_LMS.onPage(/\/profile\/settings/, function () {
    'use strict';
    console.log("on profile settings page");
    
    
    // 6. E. Scull: Change "New Access Token" button to link to our token request form
    IU_LMS.onElementRendered('a.add_access_token_link', function (selector) {
        var el = $(selector);

        //wait 1 second to allow click event to be bound by Instructure's script, then unbind it.
        setTimeout(function () {
            el.off('click');
        }, 1000);

        //set the href to our form, and update the link target to open in new tab
        el.attr("href", "https://iu.co1.qualtrics.com/jfe/form/SV_9sDpRZkqcvS2A7P");
        el.attr("target", "_blank");
    });
    
    
    
    // 8. E. Scull: Prevent users from changing their default email address.
    //Remove the "star" indicators/links in the right column.
    IU_LMS.onElementRendered('td.email_meta > a', function (selector) {
        var el = $(selector);
        el.remove();
    });
    
    //Make the default email drop-down select in the left column un-changable
    IU_LMS.onElementRendered('select#default_email_id', function (selector) {
        var el = $(selector);
        el.attr('disabled', 'disabled');
    });

    //Add NameCoach message next to pronouns field
    IU_LMS.onElementRendered('span#pronouns', (selector) => {
        let el = $(selector),
            pronounDescriptionEl = el.nextAll(".data_description"),
            originalText = pronounDescriptionEl.html().trim();
        
            pronounDescriptionEl.html(originalText + '. Don’t forget to <a href="https://kb.iu.edu/d/appu#record" target="_blank">add your pronouns in NameCoach</a> too.');
    });
});




/****************************************************
 *  Pages:  - Dashboard
 *          - My Courses
 *
 *  Routes: - /
 *          - /courses
 * 
 *  Tools:  - Start New Course
 * 
 ****************************************************
 */
// 7a. E. Scull: Change "Start a New Course" button to link to the LMS Dev Team's LTI tool.
// Note, button#start_new_course appears on the dashboard (domain root) and "My Courses" screen (<domain>/courses)
IU_LMS.onPage(/^\/$|^\/courses$/, function () {
    'use strict';
    console.log("on domain root or courses page");
    
    IU_LMS.onElementRendered('button#start_new_course', function (selector) {
        var el = $(selector),
            toolId = '100230',
            toolName = 'start a new course'; // to confirm that the correct tool was found.

        el.after("<a href='/users/self/external_tools/100230' class='Button button-sidebar-wide show' id='lms_start_new_course'>Start a New Course</a>");
    });

    // Needed only on /courses page.
    // Shouldn't ever display on dashboard, since this element doesn't exist
    IU_LMS.onElementRendered('.ic-Action-header__Secondary > .Button:contains("Browse More Courses")', function (selector) {
        var el = $(selector);
        el.after(
            "<a href='/users/self/external_tools/195719' class='Button' id='search-filter-manage-courses' style='margin-left: 6px'> \
                Search, Filter, and Manage Courses \
            </a>");
    });
});




// eAdd/eDrop buttons
// Spring 2021: SIS/Kulali API endpoints to retrieve pending eAdd and eDrop totals are being discontinued.
// For teachers, display a button on the main dashboard page, courses list page, and course home page that links out to a page where eAdds/eDrops are handled.
IU_LMS.onPage(/^\/$|^\/courses$|^\/courses\/[0-9]*$/, function () {
    'use strict';
    console.log("on eAdd/eDrop button eligible page");

    const eAddCode = "ADD",
          eDropCode = "DWF",
          addDropUrl = (IU_LMS.canvasInstance === "prod") 
                        ? "https://sis.iu.edu/psp/PS1PRD/IU/CS/c/IU_WEB_PANELS.IU_DROP_ADD_WL.GBL" 
                        : "https://ps1stg.iu.edu/psp/PS1STG/IU/CS/c/IU_WEB_PANELS.IU_DROP_ADD_WL.GBL";

    // Button is only available to users with the 'teacher' role in Canvas
    if (ENV.current_user_roles.indexOf('teacher') > -1) {
        
        // IU_LMS.onElementRendered(".choose_home_page_link, #lms_start_new_course", function (element) {
        //     var el = $(element);
        //     let newButtonEl = $("<a class='btn button-sidebar-wide' href='" + addDropUrl + "' target='_blank'>View eDrop/Add Worklist</a>");
        //     //If the button is being added to the course homepage after .choose_home_page_link, add an icon so it matches the other buttons.
        //     if(el.hasClass("choose_home_page_link")) {
        //         newButtonEl.prepend("<i class='icon-user'></i> ");
        //     }
        //     el.after(newButtonEl);
        // });

        

        // get pending eAdd documents
        $.when(IU_LMS.getActionItemsCount(eAddCode)).then(
            function (numItems) {
                //only show the button if there are pending documents
                if (numItems > 0) {
                    IU_LMS.onElementRendered(".choose_home_page_link, #lms_start_new_course", function (element) {
                        let el = $(element);
                        let newButtonEl = $("<a class='btn button-sidebar-wide' href='" + addDropUrl + "' target='_blank'><div class='eAdd-badge'><span class='eAddCount' aria-hidden='true'>" + numItems + "</span><span class='eAddCount screenreader-only'>" + numItems + " students waiting to add</span></div> students waiting to add </a>");
                        //If the button is being added to the course homepage after .choose_home_page_link, add an icon so it matches the other buttons.
                        if(el.hasClass("choose_home_page_link")) {
                            newButtonEl.prepend("<i class='icon-user' aria-hidden='true'></i> ");
                        }
                        el.after(newButtonEl);
                    });
                } else {
                    console.log('Zero eAdd Items found. No button necessary.');
                }
            }, function () {
                console.log('There was a problem getting the Action Items.');
            }
        );

        // get pending eDrop documents
        $.when(IU_LMS.getActionItemsCount(eDropCode)).then(
            function (numItems) {
                //only show the button if there are pending documents
                if (numItems > 0) {
                    IU_LMS.onElementRendered(".choose_home_page_link, #lms_start_new_course", function (element) {
                        let el = $(element);
                        let newButtonEl = $("<a class='btn button-sidebar-wide' href='" + addDropUrl + "' target='_blank'><div class='eAdd-badge'><span class='eAddCount' aria-hidden='true'>" + numItems + "</span><span class='eAddCount screenreader-only'>" + numItems + " students waiting to withdraw</span></div> students waiting to withdraw</a>");
                        //If the button is being added to the course homepage after .choose_home_page_link, add an icon so it matches the other buttons.
                        if(el.hasClass("choose_home_page_link")) {
                            newButtonEl.prepend("<i class='icon-user' aria-hidden='true'></i> ");
                        }
                        el.after(newButtonEl);
                    });
                } else {
                    console.log('Zero eDrop Items found. No button necessary.');
                }
            }, function () {
                console.log('There was a problem getting the Action Items.');
            }
        );

    }
});



// =============================================================================================================
// =============================================================================================================
// =============================================================================================================


//  E. Scull: This script adds a button to the assignment page when two conditions are met:
//  -- ADRX is listed as a file-upload type (allowed file extension). This is the 'trigger' for AdRx functionality.
//  -- An assignment submission has been made


IU_LMS.onPage(/^\/courses\/\d+\/assignments\/\d+$/, function () {
    'use strict';

    if ( ENV.current_user_id && ENV.COURSE_ID && ENV.ASSIGNMENT_ID ) {
        // Get enrollments to see if user is a student
        $.getJSON( `/api/v1/courses/${ENV.COURSE_ID}/enrollments?type[]=StudentEnrollment&user_id=${ENV.current_user_id}` )
            .done(( enrollments ) => {
                // If user is a student, this array will have at least one value
                if ( Array.isArray( enrollments ) && enrollments.length ) {

                    // Get the student's submissions
                    $.getJSON(`/api/v1/courses/${ENV.COURSE_ID}/assignments/${ENV.ASSIGNMENT_ID}?include[]=submission`)
                        .done( assignment => {
                            const {
                                allowed_extensions,
                                grading_type,
                                submission,
                                submission_types
                            } = assignment;

                            // Is the assignment set to "not graded"?
                            if ( !grading_type || grading_type === 'not_graded' ) {
                                return;
                            }

                            // Make sure the submission type allows for a file upload.
                            if ( !Array.isArray( submission_types ) || !submission_types.includes( 'online_upload' )) {
                                return;
                            }

                            // Is the AdRx file type in the allowed_extensions list?
                            if ( !Array.isArray( allowed_extensions ) || !allowed_extensions.some( x => x.toLowerCase().indexOf( 'adrx_' ) >= 0 )) {
                                return;
                            }

                            // This object should always be returned, even if there's no submission.
                            if ( !submission ) {
                                // Maybe console log an error?
                                return;
                            }

                            // If SUBMIT_ASSIGNMENT doesn't exist, we're on the Assignments 2 page
                            const isNewAssignmentsPage = !ENV.SUBMIT_ASSIGNMENT;
                            
                            // List of file types, excluding adrx
                            const fileTypes = allowed_extensions.filter( x => x.toLowerCase().indexOf( 'adrx' ) < 0);

                            if ( isNewAssignmentsPage ) {
                                IU_LMS.onElementRendered( "#assignments-2-student-header", ( $element ) => {
                                    if ( submission.workflow_state !== "unsubmitted" ) {
                                        IU_LMS.addShareWithAdvisorBtn( isNewAssignmentsPage );
                                    }

                                    $( $element ).on( "click", "button[data-testid='new-attempt-button']", () => {
                                        $( "#adrx-submit" ).hide();
                                    });
                                });


                                IU_LMS.onElementRendered( "div[data-testid='assignment-2-student-content-tabs']", ( $element ) => {
                                    $element.prop( "id", "iu-eds-assignments-2-tabs");
                
                                    IU_LMS.hideAdRxFileType( $element, fileTypes );

                                    $( $element ).on( "click", "#submit-button", () => {
                                        IU_LMS.addShareWithAdvisorBtn( isNewAssignmentsPage );
                                    });
                                });
                            }
                            else {
                                IU_LMS.addShareWithAdvisorBtn();

                                let $fileTypesSpan = $("ul.student-assignment-overview li span.title:contains('File Types')").next("span.value");

                                $fileTypesSpan.html( fileTypes.join( ', ' ));
                            }

                        })
                        .fail( () => {
                            console.error('Error getting assignment details.');
                        });
                }
            })
            .fail(() => {
                console.error("Failed to get user enrollments.");
            });
    }
});



/****************************************************
 *  Page:   - Course Settings
 * 
 *  Routes: - /courses/{courseId}/settings
 * 
 *  Tools:  - Edit/Delete Course Apps
 *          - Cross-listing Assistant
 *          - Blueprint Manager
 *          - Course Unlock
 * 
 ****************************************************
 */
IU_LMS.onPage(/\/courses\/\d+\/settings/, function () {
    'use strict';

    const $editCourseAppsBtn = $( 
        `<a id="iu-eds-edit-course-apps" href="/courses/${ENV.COURSE_ID}/external_tools/303905" class="btn">
            Edit/Delete Course Apps
        </a>`);

    const showEditCourseAppsBtn = () => {
        if ( !$( "#iu-eds-edit-course-apps" ).length ) {
            $( ".externalApps_buttons_container" ).prepend( $editCourseAppsBtn );
        }
    };

    // Show the Edit/Delete Course Apps button on page load
    showEditCourseAppsBtn();

    // Whenever the 'View App Center' or 'View App Confiruations'
    // buttons are clicked, show the button.
    $( "body" ).on( 'click', ".view_tools_link", () => {
        IU_LMS.onElementRendered( ".view_tools_link:contains('View App Configurations')" , () => {
            showEditCourseAppsBtn();
        });

        IU_LMS.onElementRendered( ".view_tools_link:contains('View App Center')" , () => {
            showEditCourseAppsBtn();
        });
    });
    

    // If the user clicks the 'Apps' tab, we show the custom button.
    $( "#tab-tools-link" ).click( () => {
        IU_LMS.onElementRendered( ".view_tools_link" , () => {
            showEditCourseAppsBtn();
        });
    });

    
    // J. Zook - Cross-listing Assistant button
    var crosslistToolId = '106264';

    IU_LMS.onElementRendered('#right-side div > a:first-child', function (element) {
        var el = $(element);
        el.after("<a id='iu-eds-crosslisting' class='Button Button--link Button--link--has-divider Button--course-settings cross-listing-assistant' href='/courses/" + ENV.COURSE_ID + "/external_tools/" + crosslistToolId + "'><i class='icon-forward' aria-hidden='true'></i>Cross-listing Assistant</a>");
    });

    IU_LMS.onElementRendered('.validator_link', function (element) {
        var blueprintToolIdResult = $.Deferred();
        var el = $(element);
        var isChildCourse = false;

        if (ENV && ENV.BLUEPRINT_COURSES_DATA && ENV.BLUEPRINT_COURSES_DATA.isChildCourse) {
            isChildCourse = true;
        }
        
        if (!isChildCourse) {
            $.when(IU_LMS.getFilteredCourseTabsByCourseId(ENV.COURSE_ID.toString(), 'Blueprint Manager'))
                .done(
                    function(tabResults) {
                        if (tabResults && tabResults[0] && tabResults[0].full_url) {
                            el.after('<a id="iu-eds-blueprint-manager" class="Button Button--link Button--link--has-divider Button--course-settings blueprint_manager" href="' +
                            tabResults[0].full_url +'"><i class="icon-copy" aria-hidden="true"></i>Blueprint Manager</a>');
                        }
                        else {
                            console.error('Could not find the Blueprint Manager tab or its URL.')
                        }
                    })
                .fail(
                    function() {
                        console.error('Error loading the Blueprint Manager tab.')
                    });
        }
    });



    //E. Scull - Course unlock button
    var courseUnlockToolId = '127117';

    //First, use the course ID to hit LMS Dev's REST endpoint to determine whther course is locked and button should be shown.
    //https://course-unlocker-stg.apps-test.iu.edu/rest/unlockstatus/" + ENV.COURSE_ID
    //Returns: {"buttonDisplayText":"Unlock Course","buttonRendered":true,"courseLocked":true,"courseId":"1454121"}
    $.ajax({
        url: "https://course-unlocker" + IU_LMS.lmsMicroserviceUrlStem + "rest/unlockstatus/" + ENV.COURSE_ID,
        type: 'get',
        dataType: 'json'
    })
        .done(function (data) {
            var iconClass = (data.courseLocked === true) ? "icon-unlock" : "icon-lock";

            if(data.buttonRendered === true){
                IU_LMS.onElementRendered('#right-side div > a:first-child', function (element) {
                    var el = $(element);
                    el.after("<a id='iu-eds-course-unlocker' class='Button Button--link Button--link--has-divider Button--course-settings course-lock-unlock' href='#'><i aria-hidden='true' class='" + iconClass + "'></i>" + data.buttonDisplayText + "</a>");
                });
            }

        })
        .fail(function (jqXHR, textStatus) {
            console.log("Course unlock REST request failed: " + textStatus);
        });

    //setup click event handler for course lock/unlock button
    $("body").on("click", "a.course-lock-unlock", function (e) {
        e.preventDefault();
        
        $('a.course-lock-unlock').html('Processing, page will reload when complete...');

        $.ajax({
            url: '/api/v1/courses/' + ENV.COURSE_ID + '/external_tools/sessionless_launch?id=' + courseUnlockToolId,
            success: function (tool) {
                var launchUrl = tool.url,
                    ltiIframe,
                    i;
                
                // make sure we have the tab object from the API call...
                if (launchUrl) {
                    //click triggers the appnding to the <body> of an iframe containing the sessionless launch URL
                    //iframe sends postMessage. Listener defined above.
                    ltiIframe = $('<iframe style="display:block; width:400px;" id="ltiLockUnlock" src="' + tool.url + '"></iframe>');
                    $("#ltiLockUnlock").remove();
                    $('body').append(ltiIframe);                    
                } else {
                    console.log("Sessionless url not found in course lock/unlock button script.");
                } // if
                    

            },
            fail: function () {
                alert("A problem was encountered while performing the course lock/unlock function. Please try the function again, and if the problem continues please contact the IU Support Center at ithelp@iu.edu.");
            }
        }); // ajax
    });


    var applyCourseTemplateToolId = '274265',
        reapplyDefaultTemplateToolId = '200984',
        node = 'Indiana University',
        courseId = IU_LMS.getCourseId() || '',
        lmsUrl = "https://hierarchyresourcemanager" + IU_LMS.lmsMicroserviceUrlStem + "rest/hrm/canvasCourseId/" + courseId + "/node",
        sessionlessLaunchUrl = '/api/v1/courses/' + courseId + '/external_tools/sessionless_launch?id=' + reapplyDefaultTemplateToolId;

    IU_LMS.onElementRendered('.validator_link', function (element) {
        // Assume the course is published
        var isPublished = true;

        try {
            isPublished = ENV.CONTEXTS.courses[IU_LMS.getCourseId()].available;
        }
        catch (e) {
            console.warn('Unable to get course published status from ENV.');
        }

        if (!isPublished) {

            /* 
            Note: There are two LTI tools by LMS Dev that are very similarly named:
            - 'Apply Course Template' is deployed in the course navigation where our button links to it by simple hyperlink.
            - 'Reapply Default Template' is accessed by the sessionless launch url, launched into a hidden iframe, etc.
            */

            // Add the 'Apply Course Template' button
            var el = $(element);
            el.after("<a id='apply-course-template' class='Button Button--link Button--link--has-divider Button--course-settings' href='/courses/" + courseId + "/external_tools/" + applyCourseTemplateToolId + "'><i class='icon-document' aria-hidden='true'></i>Apply Course Template</a>");
            
            // Add 'Reapply Default Template' button
            el.after("<a id='reapply-default-template' role='button' href='' class='Button Button--link Button--link--has-divider Button--course-settings'><i class='icon-forward' aria-hidden='true'></i>Reapply Default Template</a>");

            $('#reapply-default-template').click(function(e) {
                e.preventDefault();
                
                $.ajax({
                    type: "get",
                    url: lmsUrl,
                    success: function (response) {
                        if (response && typeof response.node === 'string') {
                            node = response.node;

                            var dialog = $(
                                '<div id="reapply-default-template-confirm"> \
                                    <p> \
                                        To apply the template for <strong>' + node + '</strong> to this course, click Submit. \
                                        Please note that this action may make changes to your course navigation, course settings, and/or course content. \
                                        If you are uncertain about the impact this template will have on your course, you may want to consider making a copy of your course before proceeding. \
                                        <br /> \
                                        <br /> \
                                        For more information on course templates, see <a target="_blank" href="https://kb.iu.edu/d/apsm">https://kb.iu.edu/d/apsm</a>. \
                                    </p> \
                                </div>');
            
                            $(dialog).dialog({
                                title: 'Reapply Default Template',
                                width: 600,
                                resizable: false,
                                modal: true,
                                buttons: [
                                    {
                                        text: 'Cancel',
                                        class: 'btn',
                                        click: function() {
                                            $(this).dialog('close');
                                        },
                                    },
                                    {
                                        text: 'Submit',
                                        class: 'btn btn-primary',
                                        click: function() {
                                            var launchUrl = '';
            
                                            $(this).dialog("option", "title", 'Processing...');
            
                                            $(this).dialog('option', 'buttons', []);
                                            $(this).html('<p>Your request is being processed. Please do not close this window.</p>');
            
            
                                            $.ajax({
                                                type: "get",
                                                url: sessionlessLaunchUrl,
                                                success: function (response) {
                                                    if (response && typeof response.url === 'string') {
                                                        launchUrl = response.url;
            
                                                        var ltiIframe = $('<iframe style="display: none;" id="reapplyDefaultTemplateFrame" src="' + launchUrl + '"></iframe>');
                                                        // Remove the frame if it already exists
                                                        $("#reapplyDefaultTemplateFrame").remove();
                                                        $('body').append(ltiIframe);
            
                                                        $(dialog).dialog('option', 'title', 'Submitted');
                                                        $(dialog).html(
                                                            '<p> \
                                                                Your request to apply the template has been submitted. \
                                                                These changes may take some time to propagate through your Canvas course. \
                                                                You will need to refresh the page for the changes to appear. \
                                                                <br /> \
                                                                <br /> \
                                                                You can now close this window. \
                                                            </p>');
                                                    }
                                                    else {
                                                        console.error('No sessionless launch URL was returned for the Course Template tool.');
                                                        $(dialog).dialog('option', 'title', 'Error');
                                                        $(dialog).html(
                                                            '<p> \
                                                                An error has occurred. Unable to launch Course Template tool. The course template will not be applied. \
                                                                <br /> \
                                                                <br /> \
                                                                Please <a target="_blank" href="https://kb.iu.edu/d/abxl">contact the Support Center</a> for assistance. \
                                                            </p>');
                                                    }
            
                                                    $(dialog).dialog('option', 'buttons', [
                                                        {
                                                            text: 'Close',
                                                            class: 'btn btn-primary',
                                                            click: function() {
                                                                $(this).dialog('close');
                                                            }
                                                        }
                                                    ]);
                                                },
                                                error: function () {
                                                    console.error('Error getting sessionless launch URL for Course Template tool.');
            
                                                    $(dialog).dialog('option', 'title', 'Error');
                                                    $(dialog).html(
                                                        '<p> \
                                                            A server error occurred. The course template will not be applied. \
                                                            <br /> \
                                                            <br /> \
                                                            Please <a target="_blank" href="https://kb.iu.edu/d/abxl">contact the Support Center</a> for assistance. \
                                                        </p>');
            
                                                    $(dialog).dialog('option', 'buttons', [
                                                        {
                                                            text: 'Close',
                                                            class: 'btn btn-primary',
                                                            click: function() {
                                                                $(this).dialog('close');
                                                            }
                                                        }
                                                    ]);
                                                }
                                            });
                                        }
                                    }
                                ]
                            });
                        }
                        else {
                            console.error('Response from LMS endpoint was malformed.');

                            var dialog = $(
                                '<p> \
                                    A server response error occurred. The course template will not be applied. \
                                    <br /> \
                                    <br /> \
                                    Please <a target="_blank" href="https://kb.iu.edu/d/abxl">contact the Support Center</a> for assistance. \
                                </p>');
            
                            $(dialog).dialog({
                                title: 'Error',
                                width: 600,
                                resizable: false,
                                modal: true,
                                buttons: [
                                    {
                                        text: 'Close',
                                        class: 'btn btn-primary',
                                        click: function() {
                                            $(this).dialog('close');
                                        },
                                    }
                                ]
                            });
                        }
                    },
                    error: function () {
                        console.error('Error getting current node from LMS endpoint.');

                        var dialog = $(
                            '<p> \
                                A server network error occurred. The course template will not be applied. \
                                <br /> \
                                <br /> \
                                Please <a target="_blank" href="https://kb.iu.edu/d/abxl">contact the Support Center</a> for assistance. \
                            </p>');
        
                        $(dialog).dialog({
                            title: 'Error',
                            width: 600,
                            resizable: false,
                            modal: true,
                            buttons: [
                                {
                                    text: 'Close',
                                    class: 'btn btn-primary',
                                    click: function() {
                                        $(this).dialog('close');
                                    },
                                }
                            ]
                        });
                    }
                });
            });
        }
    });
});


/****************************************************
 *  Page:   - Announcements
 * 
 *  Route:  - /courses/{courseId}/announcements
 * 
 *  Tools:  - Multicourse Announcements
 * 
 ****************************************************
 */
IU_LMS.onPage(/\/courses\/\d+\/announcements/, function () {
    'use strict';

    //Add Multicourse Announcements Button
    //Only add when the +Announcement button is visible, so that only those with permissions to add announcments will see it.
    IU_LMS.onElementRendered("a#add_announcement", function (selector) {
    
        $.when(IU_LMS.getFilteredCourseTabsByCourseId(ENV.COURSE_ID.toString(), 'Multicourse Announcements'))
            .done(
                function(tabResults) {
                    if (tabResults && tabResults[0] && tabResults[0].full_url) {
                        var $addAnnouncement            = $(selector),
                            addAnnouncementClassList    = document.querySelector('a#add_announcement').classList,
                            $deleteAnnouncement         = $('button#delete_announcements'),
                            $addMulticourseAnnouncement = $(
                                '<a id="add_multicourse_announcements" style="white-space: nowrap; margin-left: 12px; margin-bottom: 5px;" class="add_multicourse_announcements" ' + 
                                    'href="' + tabResults[0].full_url +'" tabindex="0" role="button">' +
                                        '<i class="icon-plus" aria-hidden="true">&nbsp;</i>' +
                                        'Multicourse Announcement' + 
                                '</a>');
                            
                        $deleteAnnouncement.css('margin-right', '0px');
                        $deleteAnnouncement.css('margin-bottom', '5px');

                        $addAnnouncement.css("margin-left", "12px");
                        $addAnnouncement.css("margin-bottom", "5px");
                        //Insert new button before the External Feeds button, separated with a pipe.
                        $addMulticourseAnnouncement.insertAfter($addAnnouncement);

                        if (addAnnouncementClassList.length) {
                            for (var i = 0; i < addAnnouncementClassList.length; i++) {
                                document.querySelector('.add_multicourse_announcements').classList.add(addAnnouncementClassList[i]);
                            }
                            
                        }
                        else {
                            document.querySelector('.add_multicourse_announcements').classList.add(["Button", "Button--primary"]);
                        }
                        
                        /*var $externalFeedButton = $("button#external_feed"),
                            $mcAnnouncementsButton = $('<a id="add_multicourse_announcements" style="padding:0;" class="Button add_multicourse_announcements" href="' + tabResults[0].full_url +'"><i class="icon-copy"></i> Multicourse Announcements</a>');

                        //Insert new button before the External Feeds button, separated with a pipe.
                        $mcAnnouncementsButton.insertBefore($externalFeedButton);
                        $mcAnnouncementsButton.after("<span style='display:inline-block; padding:0 0.5em;'>|<span>");
                        */
                    }
                    else {
                        console.error('Could not find the Multicourse Announcements tab or its URL.')
                    }
                })
            .fail(
                function() {
                    console.error('Error loading the Multicourse Announcements tab.')
                });
    });
});




/****************************************************
 *  Page:   - People
 * 
 *  Route:  - /courses/{courseId}/users
 * 
 *  Tools:  - IU Photo Roster
 *          - Roster Status Report
 * 
 ****************************************************
 */
IU_LMS.onPage(/\/courses\/\d+\/users/, function () {
    'use strict';

    var courseId    = ENV.course.id,
        userId      = ENV.current_user_id;

    IU_LMS.onElementRendered('div#people-options', function (selector) {
        var $peopleOptions              = $(selector),
            rosterStatusReportToolName  = "Roster Status Report";

        
        // Add the IU Photo Roster tool.
        $peopleOptions.before(
            '<a href="/courses/' + courseId + '/external_tools/191622" style="margin-right: 1rem;" class="btn btn-primary">' +
                '<i class="icon-user" style="margin-right: .25rem;" aria-hidden="true"></i>Photo Roster' +
            '</a>');

        // If the "Add People" button exists, the user is either a Teacher or Admin.
        IU_LMS.onElementRendered('#addUsers', function () {   

            // Add Roster Status Report tool.
            // Last argument is isSessionlessLaunch=true.
            IU_LMS.getCourseTabUrlByName(courseId, rosterStatusReportToolName, true)
                .done(
                    function (url) {
                        if (url) {
                            var $peopleOptionsMenu = $($peopleOptions).find('ul');

                            if ($peopleOptionsMenu.length > 0) {
                                $peopleOptionsMenu.append(
                                    '<li role="presentation" class="ui-menu-item">' +
                                        '<a href="#" id="ui-id-roster-status-report" ' +
                                            'class="ui-corner-all" tabindex="-1" role="menuitem">' +
                                                '<i class="icon-document" style="margin-right: .25rem;" aria-hidden="true"></i>Roster Status Report</a>' +
                                    '</li>');

                                IU_LMS.attachSessionlessLaunchEventHandler('click', '#ui-id-roster-status-report', url);
                            }
                            else {
                                console.error('Could not add Roster Status Report tool. Could not find People Options menu.');
                            }
                        }
                        else {
                            console.error('Could not add Roster Status Report tool. Could not find URL for tool.');
                        }
                    })
                .fail(
                    function (errorMessage) {
                        console.error('Unable to add Roster Status Report tool. ' + errorMessage);
                    });
        });
    });
});



/****************************************************
 *  Pages:  - Conversations (Canvas Messages)
 *
 *  Routes: - /conversations
 * 
 *  Tools:  - Multicourse Messenger Tool
 * 
 ****************************************************
 */
IU_LMS.onPage(/\/conversations/, function () {
    'use strict';
    console.log("on conversations page. userid: " + ENV.current_user.id);
    
    var userId = ENV.current_user.id,
        multicourseMessagerToolId = '175133',
        multicourseMessagerURL = '/users/' + userId + '/external_tools/' + multicourseMessagerToolId;
    

    IU_LMS.onElementRendered('button#compose-btn', function (selector) {
        var $el = $(selector);
        var $newButton = $('<a href="' + multicourseMessagerURL + '" style="margin-left: 4px;" class="btn" id="multicourse-message-btn" title="Compose a new multicourse message"><span class="screenreader-only">Compose a new multicourse message</span><i class="icon-copy icon-Line" aria-hidden="true"></i></a>');
        $el.after($newButton);
    });

});


// ================================================================================
// ===== postMessage Event Listeners: =============================================
// ================================================================================



// E. Scull: Listen for postMessage coming from inside iframe. Perform specific actions depending on the message received.
// Usage in iframe's javascript: window.parent.postMessage({"subject": "iu.frameResize", "height": document.body.clientHeight + "px"}, '*');  
window.addEventListener('message', function (e) {
    "use strict";

    var $iframeToResize = null,
        iframeClass = 'iu-frameResize',
        messageOrigin = e.origin,
        messageData = e.data,
        messageSubject = messageData.subject;
    
    //console.log("got message from " + messageOrigin + ": " + JSON.stringify(messageData));
    
    // Ensure the message is coming from an allowed origin domain:
    // ----------------------------------------------------------------------------------------
    if (
        messageOrigin.indexOf("instructure.com") === -1 &&
        messageOrigin.indexOf("canvas-user-content.com") === -1 &&
        messageOrigin.indexOf("indiana.edu") === -1 &&
        messageOrigin.indexOf("iu.edu") === -1 &&
        messageOrigin.indexOf("iupui.edu") === -1 &&
        messageOrigin.indexOf("iusb.edu") === -1 &&
        messageOrigin.indexOf("iuk.edu") === -1 &&
        messageOrigin.indexOf("iue.edu") === -1 &&
        messageOrigin.indexOf("iun.edu") === -1 &&
        messageOrigin.indexOf("ius.edu") === -1 &&
        messageOrigin.indexOf("ipfw.edu") === -1 &&
        messageOrigin.indexOf("iupuc.edu") === -1
    ) {
        console.log("postMessage received from unauthorized domain: " + messageOrigin);
        return;
    }




    // iFrame Resize
    // ----------------------------------------------------------------------------------------
    if (messageSubject === 'iu.frameResize') {        
        //see if we have a URL passed with the data. We can use this to figure out which iframe to resize
        //If URL not supplied, default to the prescribed class attribute.
        if (messageData.url) {
            $iframeToResize = $("iframe[src*='" + messageData.url + "']");
        } else {
            $iframeToResize = $("iframe." + iframeClass);
        }
        
        if ($iframeToResize.length >= 1) {
            //ensure that we have a height value
            if (messageData.height) {
                //resize the iframe
                $iframeToResize.height(messageData.height);

                //the height of this div inside of the LTI area was overriding the height
                //that our LTI apps were sending as a post message; the LTI content is bumped
                //off the page after the resize happens in the iframe above; this fixes it
                //document.getElementById('tool_content').style.height = '';
            }
        } else {
            console.log("Cannot determine which iframe element to resize. Iframe must contain the proper class attribute, or the postMessage must specify the URL of the iframe's src attribute.");
        }

    }



    // AdRx submission with token
    // ----------------------------------------------------------------------------------------
    if (messageSubject === 'iu.adrxToken' && messageData.token) {

        // Get the dialog prompt that should be in the DOM
        let $dialog = $( "#adrx-status" );

        if( !ENV.ASSIGNMENT_ID ) {
            // Stop the loading spinner
            $( ".iu-eds-spinner" ).spin( false );

            $dialog.dialog( 'option', 'title', 'AdRx Submission Error');
            $dialog.html( '<p>Assignment ID was not found in the current browser environment. Please refresh the page and try again.</p>' );
            $dialog.dialog( 'option', 'buttons', [
                {
                    text: 'Close',
                    class: 'btn btn-primary',
                    click: () => {
                        $dialog.dialog('close');
                    }
                }
            ]);
            $dialog.dialog( 'open' );
        
            return;
        }

        //POST to the API, include the adrxToken and the Canvas ASSIGNMENT_ID
        $.ajax({
            url: "https://adrx" + IU_LMS.lmsMicroserviceUrlStem + "rest/post/",
            type: 'post',
            crossDomain: true,
            data: {
                token : messageData.token,
                assignmentId : ENV.ASSIGNMENT_ID
            },
            dataType: 'html'
        })
            .done(( response ) => {
                // Stop the loading spinner
                $( ".iu-eds-spinner" ).spin( false );

                $dialog.dialog( 'option', 'title', 'Submission Successful');
                $dialog.html( `<p>${response}</p>` );
                $dialog.dialog( 'option', 'buttons', [
                    {
                        text: 'Close',
                        class: 'btn btn-primary',
                        click: () => {
                            $dialog.dialog('close');
                        }
                    }
                ]);
                $dialog.dialog( 'open' );
            })
            .fail(( response ) => {
                // Stop the loading spinner
                $( ".iu-eds-spinner" ).spin( false );

                $dialog.dialog( 'option', 'title', 'AdRx Submission Error');
                $dialog.html( `<p>Server error encountered while submitting assignment. Please reload the page and try again.</p>` );
                $dialog.dialog( 'option', 'buttons', [
                    {
                        text: 'Close',
                        class: 'btn btn-primary',
                        click: () => {
                            $dialog.dialog('close');
                        }
                    }
                ]);
                $dialog.dialog( 'open' );
            });
    }
    

    // AdRx error
    // ----------------------------------------------------------------------------------------
    if (messageSubject === 'iu.adrxError') {
        let $dialog = $( "#adrx-status" );
        
        // Stop the loading spinner
        $( ".iu-eds-spinner" ).spin( false );

        $dialog.dialog( 'option', 'title', 'AdRx Submission Error');
        $dialog.html( `<p>Server error encountered while submitting assignment. Please reload the page and try again.</p>` );
        $dialog.dialog( 'option', 'buttons', [
            {
                text: 'Close',
                class: 'btn btn-primary',
                click: () => {
                    $dialog.dialog('close');
                }
            }
        ]);
        $dialog.dialog( 'open' );
    }








    // Course Lock/Unlock
    // ----------------------------------------------------------------------------------------
    if (messageSubject === 'iu.unlockstatus' && messageData.courseid) {
        location.reload();
    }
    
    // TODO: If we receive a course lock/unlock error postMessage, alert the user.
    // if (messageSubject === 'iu.unlockerror') {
    //     alert(messageData.error);
    // }




    
}, false);






/*
From Ryan Shaw at Instructure:
    https://github.com/ryankshaw/widgetize-canvas-lms-user-content
    
    A drop-in replacement for the functionality in Canvas LMS that makes jqueryUI 
    widgets out of your user content 

    I don't actually recommend people continue to use this going forward. 
    I am just providing it so all of your legacy content that might have used the 
    magic functionality in CanvasLMS that makes jqueryUI widgets out of your user 
    content continues to work exactly as it did before, 
    even if/when that functionality is removed from core canvas.
*/
!function(s,d,url,e,p){
  e=d.createElement(s),p=d.getElementsByTagName(s)[0];e.async=1;e.src=url;p.parentNode.insertBefore(e,p)
}('script', document, 'https://unpkg.com/widgetize-canvas-lms-user-content');




// Google Analytics code
// From https://community.canvaslms.com/docs/DOC-9211-how-to-set-up-google-analytics-for-canvas
function removeStorage(e){try{localStorage.removeItem(e),localStorage.removeItem(e+"_expiresIn")}catch(t){return console.log("removeStorage: Error removing key ["+e+"] from localStorage: "+JSON.stringify(t)),!1}return!0}function getStorage(e){var t=Date.now(),o=localStorage.getItem(e+"_expiresIn");if(null==o&&(o=0),o<t)return removeStorage(e),null;try{return localStorage.getItem(e)}catch(t){return console.log("getStorage: Error reading key ["+e+"] from localStorage: "+JSON.stringify(t)),null}}function setStorage(e,t,o){o=null==o?86400:Math.abs(o);var s=Date.now()+1e3*o;try{localStorage.setItem(e,t),localStorage.setItem(e+"_expiresIn",s)}catch(t){return console.log("setStorage: Error setting key ["+e+"] in localStorage: "+JSON.stringify(t)),!1}return!0}async function coursesRequest(e){let t=await fetch("/api/v1/users/self/courses?per_page=100"),o=await t.text();o=o.replace('while(1);', ''),o=JSON.parse(o);var s=JSON.stringify(o);return setStorage("ga_enrollments",s,null),parseCourses(e,s)}function parseCourses(e,t){if(null!=t){let s=JSON.parse(t);for(var o=0;o<s.length;o++)if(s[o].id==e)return s[o]}return null}function gaCourseDimensions(e){custom_ga("set","dimension4",e.id),custom_ga("set","dimension5",e.name),custom_ga("set","dimension6",e.account_id),custom_ga("set","dimension7",e.enrollment_term_id),custom_ga("set","dimension8",e.enrollments[0].type),custom_ga("send","pageview")}function googleAnalyticsCode(e){var t,o,s,n;if(custom_ga("create",e,"auto"),t=ENV.current_user_id,o=ENV.current_user_roles,custom_ga("set","userId",t),custom_ga("set","dimension1",t),custom_ga("set","dimension3",o),n=window.location.pathname.match(/\/courses\/(\d+)/)){n=n[1],s=0;try{let e=getStorage("ga_enrollments");if(null!=e){var r=parseCourses(n,e);null===r?coursesRequest(n).then(e=>{null===e?(custom_ga("set","dimension4",n),custom_ga("send","pageview")):gaCourseDimensions(e)}):gaCourseDimensions(r)}else coursesRequest(n).then(e=>{null===e?(custom_ga("set","dimension4",n),custom_ga("send","pageview")):gaCourseDimensions(e)})}catch(e){if((s+=1)>5)return custom_ga("set","dimension4",n),void custom_ga("send","pageview")}}else custom_ga("send","pageview")}!function(e,t,o,s,n,r,a){e.GoogleAnalyticsObject=n,e[n]=e[n]||function(){(e[n].q=e[n].q||[]).push(arguments)},e[n].l=1*new Date,r=t.createElement(o),a=t.getElementsByTagName(o)[0],r.async=1,r.src="https://www.google-analytics.com/analytics.js",a.parentNode.insertBefore(r,a)}(window,document,"script",0,"custom_ga");
if(window.location.href.lastIndexOf("https://iu.instructure.com", 0) === 0) {
    //Production Canvas
    googleAnalyticsCode("UA-53428811-2");        
}
if(window.location.href.lastIndexOf("https://iu.test.instructure.com", 0) === 0) {
    //Test Canvas
    googleAnalyticsCode("UA-53428811-1");    
}
// ---------------------------


// Blue Connector script
// There are two different versions of this script, one for prod and one for test. 
var BLUE_CANVAS_SETUP;
if(IU_LMS.canvasInstance === 'test') {
    //test
    BLUE_CANVAS_SETUP={connectorUrl:"https://tst-coursequestionnaire.iu.edu/BlueConnector/",canvasAPI:"https://iu.test.instructure.com",domainName:"com.explorance",consumerID:"F1kwpmT7Rg8cllBN3K-j-Q==",defaultLanguage:"en-us"},BlueCanvasJS=document.createElement("script");BlueCanvasJS.setAttribute("type","text/javascript");BlueCanvasJS.setAttribute("src","https://tst-coursequestionnaire.iu.edu/BlueConnector//Scripts/Canvas/BlueCanvas.min.js");document.getElementsByTagName("head")[0].appendChild(BlueCanvasJS);
} else {
    //prod
    BLUE_CANVAS_SETUP={connectorUrl:"https://coursequestionnaire.iu.edu/BlueConnector/",canvasAPI:"https://iu.instructure.com",domainName:"com.explorance",consumerID:"uneAb3wY2QaWRG4D4S117w==",defaultLanguage:"en-us"},BlueCanvasJS=document.createElement("script");BlueCanvasJS.setAttribute("type","text/javascript");BlueCanvasJS.setAttribute("src","https://coursequestionnaire.iu.edu/BlueConnector//Scripts/Canvas/BlueCanvas.min.js?"+(new Date).getTime());document.getElementsByTagName("head")[0].appendChild(BlueCanvasJS);
}

// Ally integration JavaScript, from Kevin Brokamp, August 9, 2021
window.ALLY_CFG = {
    'baseUrl': 'https://prod.ally.ac',
    'clientId': 10609,
    'lti13Id':'290000000000645'
};
$.getScript(ALLY_CFG.baseUrl + '/integration/canvas/ally.js');